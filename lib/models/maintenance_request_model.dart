// @dart=2.9

/// id : 4
/// name : "Test Maintenance Request"
/// code : "MT/2021/000001"
/// vehicle_id : {"id":7,"name":"Mitsubishi /Canter/3H/2417"}
/// driver_id : {"id":1046,"name":" Aung Thant Zin"}
/// request_date : "2021-03-19"
/// maintenance_type : "corrective"
/// image : ""
/// image1 : ""
/// image2 : "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"
/// image3 : ""
/// image4 : ""
/// image5 : "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"
/// maintenance_team_id : {"id":2,"name":"Outsource Team"}
/// user_id : {"id":26,"name":"Khin Swe Win"}
/// start_date : "2021-03-01 03:09:38"
/// end_date : "2021-03-01 03:09:38"
/// actual_duration : 0.0
/// priority : "2"
/// email_cc : "aungsithumoe1@gmail.com"
/// company_id : 1
/// description : "Description"
/// purchase_line : [{"name":"P00007","date_approve":null,"partner_id":{"id":955,"name":"Kyaw Zay Ya"},"company_id":{"id":1,"name":"WIN BROTHERS GROUP OF COMPANIES LIMITED"},"date_planned":"2021-03-01 03:10:34","user_id":{"id":2,"name":"Htun Win"},"origin":"New","amount_total":0.0,"state":"draft"}]
/// warehouse_ids : [{"product_id":{"id":73,"name":"ABS Sensor ဖြုတ်/တပ် (တစ်ခုစီ)"},"location_id":{"id":102,"name":"Stock"},"cost":0.0,"qty":1000.0}]
/// maintenance_product_ids : [{"product_id":{"id":73,"name":"ABS Sensor ဖြုတ်/တပ် (တစ်ခုစီ)"},"category_id":{"id":15,"name":"Maintenance"},"type":"repair","qty":1.0},{"product_id":{"id":86,"name":"AT fluid"},"category_id":{"id":15,"name":"Maintenance"},"type":"repair","qty":1.0}]
/// location_id : {"id":null,"name":null}
/// qty : 0.0

class Maintenance_request_model {
  int _id;
  String _name;
  String _code;
  Vehicle_id _vehicleId;
  Driver_id _driverId;
  Spare_id _spareId;
  Spare_id _spare2Id;
  String _requestDate;
  String _maintenanceType;
  String _state;
  String _image;
  String _image1;
  String _image2;
  String _image3;
  String _image4;
  String _image5;
  Maintenance_team_id _maintenanceTeamId;
  User_id _userId;
  String _startDate;
  String _endDate;
  double _actualDuration;
  String _priority;
  String _emailCc;
  Company_id _companyId;
  String _description;
  List<Purchase_line> _purchaseLine;
  List<Warehouse_ids> _warehouseIds;
  List<Maintenance_product_ids> _maintenanceProductIds;
  List<Maintenance_purchase_line> _maintenancePurchaseline;
  Location_id _locationId;
  double _qty;
  String _title;
  double _duration_days;
  double _duration_hours;

  String get title => _title;
  int get id => _id;
  String get name => _name;
  String get code => _code;
  Vehicle_id get vehicleId => _vehicleId;
  Driver_id get driverId => _driverId;
  Spare_id get spareId => _spareId;
  Spare_id get spare2Id => _spare2Id;
  String get requestDate => _requestDate;
  String get maintenanceType => _maintenanceType;
  String get state => _state;
  String get image => _image;
  String get image1 => _image1;
  String get image2 => _image2;
  String get image3 => _image3;
  String get image4 => _image4;
  String get image5 => _image5;
  Maintenance_team_id get maintenanceTeamId => _maintenanceTeamId;
  User_id get userId => _userId;
  String get startDate => _startDate;
  String get endDate => _endDate;
  double get actualDuration => _actualDuration;
  String get priority => _priority;
  String get emailCc => _emailCc;
  Company_id get companyId => _companyId;
  String get description => _description;
  List<Purchase_line> get purchaseLine => _purchaseLine;
  List<Warehouse_ids> get warehouseIds => _warehouseIds;
  List<Maintenance_product_ids> get maintenanceProductIds => _maintenanceProductIds;
  Location_id get locationId => _locationId;
  double get qty => _qty;
  double get duration_days => _duration_days;
  double get duration_hours => _duration_hours;
  Maintenance_request_model({
      int id, 
      String name, 
      String code, 
      Vehicle_id vehicleId, 
      Driver_id driverId,
      Spare_id spareId,
      String requestDate, 
      String maintenanceType,
      String state,
      String image, 
      String image1, 
      String image2, 
      String image3, 
      String image4, 
      String image5, 
      Maintenance_team_id maintenanceTeamId, 
      User_id userId, 
      String startDate, 
      String endDate, 
      double actualDuration, 
      String priority, 
      String emailCc,
      Company_id companyId,
      String description, 
      List<Purchase_line> purchaseLine, 
      List<Warehouse_ids> warehouseIds, 
      List<Maintenance_product_ids> maintenanceProductIds, 
      Location_id locationId, 
      double qty}){
    _id = id;
    _name = name;
    _code = code;
    _vehicleId = vehicleId;
    _driverId = driverId;
    _spareId = spareId;
    _spare2Id = spare2Id;
    _requestDate = requestDate;
    _maintenanceType = maintenanceType;
    _state = state;
    _image = image;
    _image1 = image1;
    _image2 = image2;
    _image3 = image3;
    _image4 = image4;
    _image5 = image5;
    _maintenanceTeamId = maintenanceTeamId;
    _userId = userId;
    _startDate = startDate;
    _endDate = endDate;
    _actualDuration = actualDuration;
    _priority = priority;
    _emailCc = emailCc;
    _companyId = companyId;
    _description = description;
    _purchaseLine = purchaseLine;
    _warehouseIds = warehouseIds;
    _maintenanceProductIds = maintenanceProductIds;
    _locationId = locationId;
    _qty = qty;
}

  Maintenance_request_model.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"]??'';
    _code = json["code"];
    _vehicleId = json["vehicle_id"] != null ? Vehicle_id.fromJson(json["vehicle_id"]) : null;
    _driverId = json["driver_id"] != null ? Driver_id.fromJson(json["driver_id"]) : null;
    _spareId = json["spare1_id"] != null ? Spare_id.fromJson(json["spare1_id"]) : null;
    _spare2Id = json["spare2_id"] != null ? Spare_id.fromJson(json["spare2_id"]) : null;
    _requestDate = json["request_date"];
    _maintenanceType = json["maintenance_type"];
    _state = json['state'];
    _image = json["image"];
    _image1 = json["image1"];
    _image2 = json["image2"];
    _image3 = json["image3"];
    _image4 = json["image4"];
    _image5 = json["image5"];
    _maintenanceTeamId = json["maintenance_team_id"] != null ? Maintenance_team_id.fromJson(json["maintenance_team_id"]) : null;
    _userId = json["user_id"] != null ? User_id.fromJson(json["user_id"]) : null;
    _startDate = json["start_date"];
    _endDate = json["end_date"];
    _actualDuration = json["actual_duration"];
    _priority = json["priority"];
    _emailCc = json["email_cc"];
    _companyId = json["company_id"] != null ? Company_id.fromJson(json["company_id"]) : null;
    _description = json["description"];
    if (json["purchase_line"] != null) {
      _purchaseLine = [];
      json["purchase_line"].forEach((v) {
        _purchaseLine.add(Purchase_line.fromJson(v));
      });
    }
    if (json["warehouse_ids"] != null) {
      _warehouseIds = [];
      json["warehouse_ids"].forEach((v) {
        _warehouseIds.add(Warehouse_ids.fromJson(v));
      });
    }
    if (json["maintenance_product_ids"] != null) {
      _maintenanceProductIds = [];
      json["maintenance_product_ids"].forEach((v) {
        _maintenanceProductIds.add(Maintenance_product_ids.fromJson(v));
      });
    }
    _locationId = json["location_id"] != null ? Location_id.fromJson(json["location_id"]) : null;
    _qty = json["qty"];
    _duration_days = json["duration_days"];
    _duration_hours = json["duration_hrs"];
    if (json["purchase_line"] != null) {
      _maintenancePurchaseline = [];
      json["purchase_line"].forEach((v) {
        _maintenancePurchaseline.add(Maintenance_purchase_line.fromJson(v));
      });
    }
    //_title = json["title"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    map["code"] = _code;
    if (_vehicleId != null) {
      map["vehicle_id"] = _vehicleId.toJson();
    }
    if (_driverId != null) {
      map["driver_id"] = _driverId.toJson();
    }
    map["request_date"] = _requestDate;
    map["maintenance_type"] = _maintenanceType;
    map['state'] = _state;
    map["image"] = _image;
    map["image1"] = _image1;
    map["image2"] = _image2;
    map["image3"] = _image3;
    map["image4"] = _image4;
    map["image5"] = _image5;
    if (_maintenanceTeamId != null) {
      map["maintenance_team_id"] = _maintenanceTeamId.toJson();
    }
    if (_userId != null) {
      map["user_id"] = _userId.toJson();
    }
    map["start_date"] = _startDate;
    map["end_date"] = _endDate;
    map["actual_duration"] = _actualDuration;
    map["priority"] = _priority;
    map["email_cc"] = _emailCc;
    map["company_id"] = _companyId;
    map["description"] = _description;
    if (_purchaseLine != null) {
      map["purchase_line"] = _purchaseLine.map((v) => v.toJson()).toList();
    }
    if (_warehouseIds != null) {
      map["warehouse_ids"] = _warehouseIds.map((v) => v.toJson()).toList();
    }
    if (_maintenanceProductIds != null) {
      map["maintenance_product_ids"] = _maintenanceProductIds.map((v) => v.toJson()).toList();
    }
    if (_locationId != null) {
      map["location_id"] = _locationId.toJson();
    }
    map["qty"] = _qty;
    return map;
  }

}

/// id : null
/// name : null

class Location_id {
  dynamic _id;
  dynamic _name;

  dynamic get id => _id;
  dynamic get name => _name;

  Location_id({
      dynamic id, 
      dynamic name}){
    _id = id;
    _name = name;
}

  Location_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}

/// product_id : {"id":73,"name":"ABS Sensor ဖြုတ်/တပ် (တစ်ခုစီ)"}
/// category_id : {"id":15,"name":"Maintenance"}
/// type : "repair"
/// qty : 1.0

class Maintenance_product_ids {
  int _id;
  Product_id _productId;
  Category_id _categoryId;
  String _type;
  double _qty;

  int get id => _id;
  Product_id get productId => _productId;
  Category_id get categoryId => _categoryId;
  String get type => _type;
  double get qty => _qty;

  Maintenance_product_ids({
      int id,
      Product_id productId, 
      Category_id categoryId, 
      String type, 
      double qty}){
    _id = id;
    _productId = productId;
    _categoryId = categoryId;
    _type = type;
    _qty = qty;
}

  Maintenance_product_ids.fromJson(dynamic json) {

    _id = json["id"];
    _productId = json["product_id"] != null ? Product_id.fromJson(json["product_id"]) : null;
    _categoryId = json["category_id"] != null ? Category_id.fromJson(json["category_id"]) : null;
    _type = json["type"];
    _qty = json["qty"];
  }


  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    if(_id !=null)
      map["id"] = _id;
    if (_productId != null) {
      map["product_id"] = _productId.toJson();
    }
    if (_categoryId != null) {
      map["category_id"] = _categoryId.toJson();
    }
    map["type"] = _type;
    map["qty"] = _qty;
    return map;
  }

}
class Maintenance_purchase_line {
  String _name;
  String date_approve;
  Category_id _partner_id;
  Category_id _company_id;
  String date_planned;
  Category_id user_id;
  double _amount_total;

  String get name => _name;
  Category_id get partnerId => _partner_id;
  Category_id get companyID => _company_id;
  double get type => _amount_total;


  Maintenance_purchase_line.fromJson(dynamic json) {

    _name = json["name"];
    date_approve = json["date_approve"];
    _partner_id = json["partner_id"] != null ? Category_id.fromJson(json["partner_id"]) : null;
    _company_id = json["company_id"] != null ? Category_id.fromJson(json["company_id"]) : null;
    date_planned = json["date_planned"];
    _amount_total = json["amount_total"];
  }


}
class Maintenance_product_id {
  int _productId;
  int _categoryId;
  String _type;
  double _qty;

  int get productId => _productId;
  int get categoryId => _categoryId;
  String get type => _type;
  double get qty => _qty;

  Maintenance_product_id({
    int productId,
    int categoryId,
    String type,
    double qty}){
    _productId = productId;
    _categoryId = categoryId;
    _type = type;
    _qty = qty;
  }


  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    if (_productId != null) {
      map["product_id"] = _productId;
    }
    if (_categoryId != null) {
      map["category_id"] = _categoryId;
    }
    map["type"] = _type;
    map["qty"] = _qty;
    return map;
  }

}
/// id : 15
/// name : "Maintenance"

class Category_id {
  int _id;
  String _name;

  int get id => _id;
  String get name => _name;

  Category_id({
      int id, 
      String name}){
    _id = id;
    _name = name;
}

  Category_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}

/// id : 73
/// name : "ABS Sensor ဖြုတ်/တပ် (တစ်ခုစီ)"

class Product_id {
  int _id;
  String _name;

  int get id => _id;
  String get name => _name;

  Product_id({
      int id, 
      String name}){
    _id = id;
    _name = name;
}

  Product_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}

/// product_id : {"id":73,"name":"ABS Sensor ဖြုတ်/တပ် (တစ်ခုစီ)"}
/// location_id : {"id":102,"name":"Stock"}
/// cost : 0.0
/// qty : 1000.0

class Warehouse_ids {
  Product_id _productId;
  Location_id _locationId;
  double _cost;
  double _qty;

  Product_id get productId => _productId;
  Location_id get locationId => _locationId;
  double get cost => _cost;
  double get qty => _qty;

  Warehouse_ids({
      Product_id productId, 
      Location_id locationId, 
      double cost, 
      double qty}){
    _productId = productId;
    _locationId = locationId;
    _cost = cost;
    _qty = qty;
}

  Warehouse_ids.fromJson(dynamic json) {
    _productId = json["product_id"] != null ? Product_id.fromJson(json["product_id"]) : null;
    _locationId = json["location_id"] != null ? Location_id.fromJson(json["location_id"]) : null;
    _cost = json["cost"];
    _qty = json["qty"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    if (_productId != null) {
      map["product_id"] = _productId.toJson();
    }
    if (_locationId != null) {
      map["location_id"] = _locationId.toJson();
    }
    map["cost"] = _cost;
    map["qty"] = _qty;
    return map;
  }

}


/// name : "P00007"
/// date_approve : null
/// partner_id : {"id":955,"name":"Kyaw Zay Ya"}
/// company_id : {"id":1,"name":"WIN BROTHERS GROUP OF COMPANIES LIMITED"}
/// date_planned : "2021-03-01 03:10:34"
/// user_id : {"id":2,"name":"Htun Win"}
/// origin : "New"
/// amount_total : 0.0
/// state : "draft"

class Purchase_line {
  String _name;
  dynamic _dateApprove;
  Partner_id _partnerId;
  Company_id _companyId;
  String _datePlanned;
  User_id _userId;
  String _origin;
  double _amountTotal;
  String _state;

  String get name => _name;
  dynamic get dateApprove => _dateApprove;
  Partner_id get partnerId => _partnerId;
  Company_id get companyId => _companyId;
  String get datePlanned => _datePlanned;
  User_id get userId => _userId;
  String get origin => _origin;
  double get amountTotal => _amountTotal;
  String get state => _state;

  Purchase_line({
      String name, 
      dynamic dateApprove, 
      Partner_id partnerId, 
      Company_id companyId, 
      String datePlanned, 
      User_id userId, 
      String origin, 
      double amountTotal, 
      String state}){
    _name = name;
    _dateApprove = dateApprove;
    _partnerId = partnerId;
    _companyId = companyId;
    _datePlanned = datePlanned;
    _userId = userId;
    _origin = origin;
    _amountTotal = amountTotal;
    _state = state;
}

  Purchase_line.fromJson(dynamic json) {
    _name = json["name"];
    _dateApprove = json["date_approve"];
    _partnerId = json["partner_id"] != null ? Partner_id.fromJson(json["partner_id"]) : null;
    _companyId = json["company_id"] != null ? Company_id.fromJson(json["company_id"]) : null;
    _datePlanned = json["date_planned"];
    _userId = json["user_id"] != null ? User_id.fromJson(json["user_id"]) : null;
    _origin = json["origin"];
    _amountTotal = json["amount_total"];
    _state = json["state"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["name"] = _name;
    map["date_approve"] = _dateApprove;
    if (_partnerId != null) {
      map["partner_id"] = _partnerId.toJson();
    }
    if (_companyId != null) {
      map["company_id"] = _companyId.toJson();
    }
    map["date_planned"] = _datePlanned;
    if (_userId != null) {
      map["user_id"] = _userId.toJson();
    }
    map["origin"] = _origin;
    map["amount_total"] = _amountTotal;
    map["state"] = _state;
    return map;
  }

}

/// id : 2
/// name : "Htun Win"

class User_id {
  int _id;
  String _name;

  int get id => _id;
  String get name => _name;

  User_id({
      int id, 
      String name}){
    _id = id;
    _name = name;
}

  User_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}

/// id : 1
/// name : "WIN BROTHERS GROUP OF COMPANIES LIMITED"

class Company_id {
  int _id;
  String _name;

  int get id => _id;
  String get name => _name;

  Company_id({
      int id, 
      String name}){
    _id = id;
    _name = name;
}

  Company_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}

/// id : 955
/// name : "Kyaw Zay Ya"

class Partner_id {
  int _id;
  String _name;

  int get id => _id;
  String get name => _name;

  Partner_id({
      int id, 
      String name}){
    _id = id;
    _name = name;
}

  Partner_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}


/// id : 2
/// name : "Outsource Team"

class Maintenance_team_id {
  int _id;
  String _name;

  int get id => _id;
  String get name => _name;

  Maintenance_team_id({
      int id, 
      String name}){
    _id = id;
    _name = name;
}

  Maintenance_team_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}
class Spare_id {
  int _id;
  String _name;

  int get id => _id;
  String get name => _name;

  Spare_id({
    int id,
    String name}){
    _id = id;
    _name = name;
  }

  Spare_id.fromJson(dynamic json) {
    _id = json["id"]==null?0:json["id"];
    _name = json["name"]==null?'':json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}
/// id : 1046
/// name : " Aung Thant Zin"

class Driver_id {
  int _id;
  String _name;

  int get id => _id;
  String get name => _name;

  Driver_id({
      int id, 
      String name}){
    _id = id;
    _name = name;
}

  Driver_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}

/// id : 7
/// name : "Mitsubishi /Canter/3H/2417"

class Vehicle_id {
  int _id;
  String _name;
  int _incharge_id;

  int get id => _id;
  String get name => _name;
  int get incharge_id => _incharge_id;

  Vehicle_id({
      int id, 
      String name}){
    _id = id;
    _name = name;
}

  Vehicle_id.fromJson(dynamic json) {
    _id = json["id"];
    _name = json["name"];
    _incharge_id = json["incharge_id"];

  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["name"] = _name;
    return map;
  }

}